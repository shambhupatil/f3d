name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - master

concurrency:
  group: '${{ github.workflow }}-${{ github.ref_name }}'
  cancel-in-progress: true

jobs:

#----------------------------------------------------------------------------
# Cache LFS: Checkout LFS data and update the cache to limit LFS bandwidth
#----------------------------------------------------------------------------
  cache_lfs:
    runs-on: ubuntu-latest
    name: Update LFS data cache
    outputs:
      lfs_sha: ${{ steps.lfs_sha_recover.outputs.lfs_sha }}
    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: 'source'
        fetch-depth: 0
        lfs: false

    - name: Set LFS env var
      working-directory: ${{github.workspace}}/source
      id: lfs_sha_recover
      shell: bash
      run: echo "lfs_sha=$(git log -n 1 --pretty=format:%H -- testing/data/ testing/baselines/ examples/**/*/data/ examples/**/*/baselines/ .github/baselines/)" >> $GITHUB_OUTPUT

    - name: Copy LFS Data
      uses: ./source/.github/actions/lfs-copy
      with:
        lfs_sha: ${{ steps.lfs_sha_recover.outputs.lfs_sha }}
        workflow_label: 'producer'

#----------------------------------------------------------------------------
# Windows CI: Build and test, cross-vtk build matrix
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# Coverage: Build and test on linux with last VTK with coverage option
#----------------------------------------------------------------------------
  coverage:
    needs: cache_lfs
    if: github.event.pull_request.draft == false

    runs-on: ubuntu-latest
    container: ghcr.io/f3d-app/f3d-ci

    # Add dummy F3D_PLUGINS_PATH for coverage
    env:
      DISPLAY: :0
      F3D_PLUGINS_PATH: /dummy1:/dummy2

    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: 'source'
        fetch-depth: 0
        lfs: false

    - name: Coverage CI
      uses: ./source/.github/actions/coverage-ci
      with:
        lfs_sha: ${{ needs.cache_lfs.outputs.lfs_sha}}
        codecov_token: ${{secrets.CODECOV_TOKEN}}

#----------------------------------------------------------------------------
# Sanitizer: Build and test on linux with last VTK with sanitizer options
#----------------------------------------------------------------------------
# "leak" is run by default with "address" so we do not need to run it in CI
# "memory" returns false positives in VTK:
# https://stackoverflow.com/questions/60097307/memory-sanitizer-reports-use-of-uninitialized-value-in-global-object-constructio
  sanitizer:
    needs: cache_lfs
    if: github.event.pull_request.draft == false

    strategy:
      fail-fast: false
      matrix:
        sanitizer_type: [address, thread, undefined]

    runs-on: ubuntu-latest
    container: ghcr.io/f3d-app/f3d-ci

    env:
      DISPLAY: :0
      CC: clang-14
      CXX: clang++-14
      VTK_SMP_BACKEND_IN_USE: Sequential

    steps:
    - name: Install clang-14
      shell: bash
      run: |
        sudo apt remove -y clang-14
        sudo apt install -y clang-14 

    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: 'source'
        fetch-depth: 0
        lfs: false

    - name: Sanitizer CI
      uses: ./source/.github/actions/sanitizer-ci
      with:
        sanitizer_type: ${{matrix.sanitizer_type}}
        lfs_sha: ${{ needs.cache_lfs.outputs.lfs_sha}}

#----------------------------------------------------------------------------
# static-analysis: Run static analysis on linux
#----------------------------------------------------------------------------
  static-analysis:
    needs: cache_lfs
    if: github.event.pull_request.draft == false

    strategy:
      fail-fast: false

    runs-on: ubuntu-latest
    container: ghcr.io/f3d-app/f3d-ci

    env:
      CC: clang
      CXX: clang++

    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: 'source'
        fetch-depth: 0
        lfs: false

    - name: Static analysis CI
      uses: ./source/.github/actions/static-analysis-ci
      with:
        lfs_sha: ${{ needs.cache_lfs.outputs.lfs_sha}}

#----------------------------------------------------------------------------
# external-build: Check build of F3D as sub-project
#----------------------------------------------------------------------------
  external-build:
    if: github.event.pull_request.draft == false

    strategy:
      fail-fast: false

    runs-on: ubuntu-latest
    container: ghcr.io/f3d-app/f3d-ci

    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: 'source/f3d'
        fetch-depth: 0
        lfs: false

    - name: External build CI
      uses: ./source/f3d/.github/actions/external-build-ci

#----------------------------------------------------------------------------
# android: Check build of F3D for android
#----------------------------------------------------------------------------

